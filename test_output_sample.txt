Available hardware:

Running tests for 2D array positive value counting...
--------------------------------------------------

======================================================================
TEST: set_dense_grid (diagonal pattern)
======================================================================
       0  1  2
       ----------
    0  *  .  . 
    1  .  *  . 
    2  .  .  * 
       ----------
       0  1  2
Using NumPy on the CPU...
   Positive count: 3
✓ Basic set_locations test passed

======================================================================
TEST: set_dense_grid with empty locations (no locations specified)
======================================================================
       0  1  2  3  4
       ----------------
    0  .  .  .  .  . 
    1  .  .  .  .  . 
    2  .  .  .  .  . 
    3  .  .  .  .  . 
    4  .  .  .  .  . 
       ----------------
       0  1  2  3  4
   Positive count: 0
✓ Empty locations test passed

======================================================================
TEST: set_dense_grid with out-of-bounds locations (invalid locations ignored)
======================================================================
Input locations: [(0, 0), (10, 10), (-1, 0), (1, 1)]
Valid locations (set): [(0, 0), (1, 1)]
Invalid locations (ignored): [(10, 10), (-1, 0)]

       0  1  2
       ----------
    0  *  .  . 
    1  .  *  . 
    2  .  .  . 
       ----------
       0  1  2
   Positive count: 2
✓ Out-of-bounds locations test passed

======================================================================
TEST: set_dense_grid single location
======================================================================
       0  1  2  3  4
       ----------------
    0  .  .  .  .  . 
    1  .  .  .  .  . 
    2  .  .  .  *  . 
    3  .  .  .  .  . 
    4  .  .  .  .  . 
       ----------------
       0  1  2  3  4
   Positive count: 1
✓ Single location test passed

======================================================================
TEST: set_dense_grid multiple locations (corners + center)
======================================================================
       0  1  2  3  4
       ----------------
    0  *  .  .  .  * 
    1  .  .  .  .  . 
    2  .  .  *  .  . 
    3  .  .  .  .  . 
    4  *  .  .  .  * 
       ----------------
       0  1  2  3  4
   Positive count: 5
✓ Multiple locations test passed

======================================================================
TEST: Modify existing dense_grid (preserves existing value)
======================================================================
       0  1  2
       ----------
    0  5  .  . 
    1  .  *  . 
    2  .  .  . 
       ----------
       0  1  2
   Positive count: 2
✓ Modify existing array test passed

======================================================================
TEST: set_dense_grid from sparse locations (opposite corners)
======================================================================
       0  1  2  3
       -------------
    0  *  .  .  . 
    1  .  .  .  . 
    2  .  .  .  . 
    3  .  .  .  * 
       -------------
       0  1  2  3
   Positive count: 2
✓ Create sparse grid test passed

======================================================================
TEST: count_dense_grid (mixed positive values)
======================================================================
       0  1  2
       ----------
    0  @  .  * 
    1  .  3  . 
    2  4  .  5 
       ----------
       0  1  2
   Positive count: 5
✓ Basic count_nonzero test passed

======================================================================
TEST: count_dense_grid all zeros (no positive values)
======================================================================
       0  1  2
       ----------
    0  .  .  . 
    1  .  .  . 
    2  .  .  . 
       ----------
       0  1  2
   Positive count: 0
✓ Count non-zero all zeros test passed

======================================================================
TEST: count_dense_grid all positive (all values are 1)
======================================================================
       0  1  2
       ----------
    0  @  @  @ 
    1  @  @  @ 
    2  @  @  @ 
       ----------
       0  1  2
   Positive count: 9
✓ Count non-zero all positive test passed

======================================================================
TEST: count_dense_grid after set_dense_grid (3 locations set to 2)
======================================================================
       0  1  2  3  4
       ----------------
    0  *  .  .  .  . 
    1  .  *  .  .  . 
    2  .  .  *  .  . 
    3  .  .  .  .  . 
    4  .  .  .  .  . 
       ----------------
       0  1  2  3  4
   Positive count: 3
✓ Count non-zero with set_locations test passed

======================================================================
TEST: count_dense_grid excludes negatives (only positive counted)
======================================================================
       0  1  2  3
       -------------
    0  1  -  .  2 
    1  .  -  1  . 
    2  -  .  3  . 
       -------------
       0  1  2  3
   Positive count: 4
✓ Count excludes negative values test passed

======================================================================
TEST: set_dense_grid_neighborhoods overlapping (L=2, close seeds)
======================================================================
       0  1  2  3  4  5  6  7
       -------------------------
    0  .  .  *  .  .  .  .  . 
    1  .  *  *  *  .  .  .  . 
    2  *  *  @  *  *  .  .  . 
    3  .  *  *  @  *  *  .  . 
    4  .  .  *  *  *  .  .  . 
    5  .  .  .  *  .  .  .  . 
    6  .  .  .  .  .  .  .  . 
    7  .  .  .  .  .  .  .  . 
       -------------------------
       0  1  2  3  4  5  6  7
   Seeds at (2, 2) and (3, 3)
   Manhattan distance between seeds: 2
   Positive count: 18 (overlapping regions counted once)
✓ Overlapping Manhattan neighborhoods test passed

======================================================================
TEST: set_dense_grid_neighborhoods non-overlapping (L=2, far seeds)
======================================================================
       0  1  2  3  4  5  6  7  8  9
       -------------------------------
    0  .  .  *  .  .  .  .  .  .  . 
    1  .  *  *  *  .  .  .  .  .  . 
    2  *  *  @  *  *  .  .  .  .  . 
    3  .  *  *  *  .  .  .  .  .  . 
    4  .  .  *  .  .  .  .  .  .  . 
    5  .  .  .  .  .  .  .  *  .  . 
    6  .  .  .  .  .  .  *  *  *  . 
    7  .  .  .  .  .  *  *  @  *  * 
    8  .  .  .  .  .  .  *  *  *  . 
    9  .  .  .  .  .  .  .  *  .  . 
       -------------------------------
       0  1  2  3  4  5  6  7  8  9
   Seeds at (2, 2) and (7, 7)
   Manhattan distance between seeds: 10
   Positive count: 26 (separate neighborhoods)
✓ Non-overlapping Manhattan neighborhoods test passed

======================================================================
TEST: set_neighborhoods_to_value preserves already-set cells
======================================================================
       0  1  2  3  4
       ----------------
    0  .  .  *  .  . 
    1  .  5  *  *  . 
    2  *  *  @  *  * 
    3  .  *  *  5  . 
    4  .  .  *  .  . 
       ----------------
       0  1  2  3  4
   Cell (1,1) value: 5 (preserved from initial set)
   Cell (3,3) value: 5 (preserved from initial set)
   Cell (2,2) value: 2 (set by set_neighborhoods_to_value)
   Positive count: 13
✓ Preserves already-set cells test passed

======================================================================
TEST: set_X_to_value with value=0 overwrites all cells
======================================================================
✓ Setting value=0 clears all appropriate cells regardless of current value
✓ Set to zero overwrites test passed

======================================================================
TEST: SparseGrid.class
======================================================================
   Grid dimensions: 100x100
   Seed locations: [(10, 10), (20, 20)]
   L: 3
   Count: 50
✓ SparseGrid class test passed

======================================================================
TEST: Example 1 - One positive cell fully contained; N=3
======================================================================
   Grid: 11x11, Seed: (5,5), L=3
   Count: 25 cells
✓ Example 1 (N=3, centered, 25 cells) test passed

======================================================================
TEST: Example 2 - One positive cell near edge; N=3
======================================================================
   Grid: 11x11, Seed: (5,2), L=3
   Count: 24 cells (1 cell fell off edge)
✓ Example 2 (N=3, near edge, 24 cells) test passed

======================================================================
TEST: Example 3 - Two positive values with disjoint neighborhoods; N=2
======================================================================
   Grid: 11x11, Seeds: (2,2) and (8,8), L=2
   Count: 26 cells (13 per neighborhood, no overlap)
✓ Example 3 (N=2, disjoint, 26 cells) test passed

======================================================================
TEST: Example 4 - Two positive values with overlapping neighborhoods; N=2
======================================================================
   Grid: 11x11, Seeds: (5,5) and (6,6), L=2
   Count: 18 cells (overlapping regions counted once)
✓ Example 4 (N=2, overlapping, ~22 cells) test passed

======================================================================
TEST: Edge case - Positive value in corner
======================================================================
   Grid: 11x11, Seed: (0,0) corner, L=2
   Count: 6 cells
✓ Corner edge case test passed

======================================================================
TEST: Edge case - Odd shaped array 1x21
======================================================================
   Grid: 1x21, Seed: (0,10), L=3
   Count: 7 cells
✓ 1x21 edge case test passed

======================================================================
TEST: Edge case - Smallest array 1x1
======================================================================
   Grid: 1x1, Seed: (0,0), L=10
   Count: 1 cells
✓ 1x1 edge case test passed

======================================================================
TEST: Edge case - Long vertical array 10x1
======================================================================
   Grid: 10x1, Seed: (5,0), L=3
   Count: 7 cells
✓ 10x1 edge case test passed

======================================================================
TEST: Edge case - Small square 2x2
======================================================================
   Grid: 2x2, Seed: (0,0), L=2
   Count: 4 cells
✓ 2x2 edge case test passed

======================================================================
TEST: Edge case - N=0 (only seed cells)
======================================================================
   Grid: 11x11, Seeds: (5,5) and (2,2), L=0
   Count: 2 cells (only seed locations)
✓ N=0 edge case test passed

======================================================================
TEST: Edge case - N >> max(W,H)
======================================================================
   Grid: 11x11, Seed: (5,5), L=100
   Count: 121 cells (entire grid)
✓ Large N edge case test passed

======================================================================
TEST: Edge case - Zero dimensions (should reject)
======================================================================
   ✓ Correctly rejected 0x10 grid: Grid dimensions must be > 0, got 0x10
   ✓ Correctly rejected 10x0 grid: Grid dimensions must be > 0, got 10x0
   ✓ Correctly rejected 0x0 grid: Grid dimensions must be > 0, got 0x0
   ✓ Correctly rejected -5x10 grid: Grid dimensions must be > 0, got -5x10
✓ Zero dimensions edge case test passed
--------------------------------------------------
✓ All tests passed!
